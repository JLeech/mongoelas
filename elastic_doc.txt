{
    "bool": {
        "must":     { "match": { "tweet": "elasticsearch" }},
        "must_not": { "match": { "name":  "mary" }},
        "should":   { "match": { "tweet": "full text" }}
    }
}

{
    "bool": {
        "must": { "match":      { "email": "business opportunity" }},
        "should": [
             { "match":         { "starred": true }},
             { "bool": {
                   "must":      { "folder": "inbox" }},
                   "must_not":  { "spam": true }}
             }}
        ],
        "minimum_should_match": 1
    }
}

filter - точное удовлетворение требованиям да/нет
	// Is the "created" date in the range 2013 - 2014?
query - так же говорит насколько точно документ удовлетворяет требованиям.
	//Containing the words "quick", "brown", and "fox" — the closer together they are, the more relevant the document

записывает очки в _score, который потом используется для сортировки результатов.
filter кешируется


самые часто используемые фильтры и запросы(query).
http://www.elasticsearch.com/guide/en/elasticsearch/guide/current/_most_important_queries_and_filters.html

term - используется для точного поиска: числа, даты,bool.
	{ "term": { "age":    26           }}

terms - для точного поиска, если может удовлетворять нескольким
	{ "terms": { "tag": [ "search", "full_text", "nosql" ] }}

range- попадание в область
	{
    "range": {
        "age": {
            "gte":  20,
            "lt":   30
        }
    }
}	
gt/gte/lt/lte

exist/missing - есть/нет данного поля у записи
{
    "exists":   {
        "field":    "title"
    }
}	

bool - фильтр объединяющий условия по булевской логике
must(and)/must_not(not)/should(or)

каждый из них может принимать как один параметр, так и массив:
{
    "bool": {
        "must":     { "term": { "folder": "inbox" }},
        "must_not": { "term": { "tag":    "spam"  }},
        "should": [
                    { "term": { "starred": true   }},
                    { "term": { "unread":  true   }}
        ]
    }
}

match используется для поиска full-text
если нужно искать одинаковое значение по нескольким полям, то
используется multi_match
{
    "multi_match": {
        "query":    "full text search",
        "fields":   [ "title", "body" ]
    }
}

bool как query, похож на bool как filter, но в отличие от yes/no
параметров поиска, выдаёт результаты с полем _score(релевантностью).
всё так же, только should может повысить _score при совпадении.

{
    "bool": {
        "must":     { "match": { "title": "how to make millions" }},
        "must_not": { "match": { "tag":   "spam" }},
        "should": [
            { "match": { "tag": "starred" }},
            { "range": { "date": { "gte": "2014-01-01" }}}
        ]
    }
}

если в условии нет ни одного matсh, то хотя бы один should должен присутствовать.

если необходимо сразу искать по фильтру и query, то нужно использовать слово filtered
{
    "query": {
        "filtered": {
            "query":  { "match": { "email": "business opportunity" }},
            "filter": { "term": { "folder": "inbox" }}
        }
    }
}



curl -XPUT 'http://localhost:9200/megacorp/employee/4' -d '{"first_name" : "John","last_name" : "Smith","age" : 25,"about" : "I love to go rock climbing","interests": [ "sports", "music" ], "lalka": true}'


curl -XGET 'http://localhost:9200/_search?pretty' -d '
{
"query":{   
        "bool":{
           "must" : [
               {"range": { "age":{ "gte" : 25}}
               },
               {"match": {
                   "first_name":{
                       "query": "John M",
                       "operator": "and"
                    }
                }
            }]
        }
    }
}
'

curl -XGET 'http://localhost:9200/_search?pretty' -d '
{
    "query": {
        "match": {"first_name": "John"}
    }
}
'

curl -XGET 'http://localhost:9200/_search?pretty' -d '
{
    "query": {
        "match": {
            "first_name":{
                "query": "John M",
                "operator": "or"
            }
        }
    }
}
'



curl -XGET 'http://localhost:9200/_search' -d '{ "query": {"filter": {"must": {"lalka": "true"}}}}'



client.search 
	index: "classifiers_kladr_streets",
	body: {
		query: {
			bool: 
				{
				must: [{
					regexp: {
						formal_name: ".*с{2,}"
					}
				},
				{
				match: {
					short_name: "ул"
				}
				}] 
			} 
		} 
	}


1)	gt,gte,lt,lte,ne,in,nin
2)	or,and,not,nor
3) 	exist(есть ли поле),type
4)	mod,regex,text,where(удовлетворяет определённому javascript)
5)	all,elemMatch,size

http://docs.mongodb.org/manual/reference/operator/query/


{
	"archived"=>false, 
	"provider_id"=>"543689d468ee000a74000001", 
	"is_reserved"=>{"$ne"=>true}, 
	"pages_count"=>123, 
	"sender_country"=>"548efab12981000003000001", 
	"sender_phone"=>"89176464", 
	"receiver_name"=>/Майданов/i, 
	"receipt_date"=>{"$gte"=>2015-02-20 00:00:00 UTC, "$lte"=>2015-02-27 00:00:00 UTC},
	"answer_notifications.addressed_to_id"=>{"$all"=>["51bae98ef27369f77500017b", "51bace4af273695ed1000128"]}, 
	"themes"=>{"$in"=>["543685ff3058000673000001", "547d8d77fcbb0002a3000001", "547703983c53000184000001"]}
}


curl -XGET 'http://localhost:9200/_search?pretty' -d '
{
"query":{   
        "bool":{
           "must" : [
               {"match": {"archived":false}},
               {"match": {"provider_id":"543689d468ee000a74000001"}},
               {"match": {"pages_count": 123}},
               {"match": {"sender_country": "548efab12981000003000001"}},
               {"match": {"sender_phone": "89176464"}},
               {"match": {"answer_notifications.addressed_to_id":{
               		"query": "51bae98ef27369f77500017b 51bace4af273695ed1000128",
               		"operator": "and"
               		}
               		}
               	},
               	{"match": {"themes":{
               		"query": "543685ff3058000673000001 547d8d77fcbb0002a3000001 547703983c53000184000001",
               		"operator": "or"
               		}}
               	},
               	{"range": { "age":{ "gte" : 25}}},
               ],
            "must_not": [
            {"match": {"is_reserved":true}}
            ]
        }
    }
}
'
[{"must"=>{"match"=>{"archived"=>false}}},
 {"must"=>{"match"=>{"provider_id"=>"543689d468ee000a74000001"}}},
 {"must_not"=>{"match"=>{"is_reserved"=>true}}},
 {"must"=>{"match"=>{"pages_count"=>123}}},
 {"must"=>{"match"=>{"sender_country"=>"548efab12981000003000001"}}},
 {"must"=>{"match"=>{"sender_phone"=>"89176464"}}},
 {"must"=>{"match"=>{"receiver_name"=>/Майданов/i}}},
 {"must"=>{"range"=>{"receipt_date"=>{"gte"=>" 2015-02-20 00:00:00 UTC", "lte"=>" 2015-02-27 00:00:00 UTC"}}}},
 {"must"=>{"match"=>{"answer_notifications.addressed_to_id"=>{"query"=>" 51bae98ef27369f77500017b 51bace4af273695ed1000128", "operator"=>"and"}}}},
 {"must"=>{"match"=>{"themes"=>{"query"=>" 543685ff3058000673000001 547d8d77fcbb0002a3000001 547703983c53000184000001", "operator"=>"or"}}}},
 nil,
 {"query"=>" 543685ff3058000673000001 547d8d77fcbb0002a3000001 547703983c53000184000001", "operator"=>"or"},
 {"gte"=>" 2015-02-20 00:00:00 UTC"},
 {"lte"=>" 2015-02-27 00:00:00 UTC"}]



про даты
http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-aggregations-bucket-daterange-aggregation.html



client.search 
	index: "classifiers_kladr_streets",
	body: {
		query: {
			bool: 
				{
				must: [{
					regexp: {
						formal_name: ".*с{2,}"
					}
				},
				{
				match: {
					short_name: "ул"
				}
				}] 
			} 
		} 
	}

curl -XGET 'http://192.168.232.8:9200/classifiers_kladr_streets/_search?pretty' -d '
{ body: {query: { bool: { must: [{match: {short_name: "ул"}} ] } } }}'


curl -XGET 'http://192.168.232.8:9200/classifiers_kladr_streets/_search?pretty' -d '
{
  "query": {
      "bool": {
        "must":[
          {"match": {"short_name": "ул"}},
          {"bool": {
            "should":[
              {"match":{"name": "Школьная"}},
              {"filtered" : {
                "filter":{
                "not" : {
                  "term":{"short_name": "gk"}
                }
              }}}
            ]
          }
          } 
        ]
    }
  }
}
'


curl -XGET 'http://192.168.232.8:9200/classifiers_kladr_streets/_search?pretty' -d '
{
  "query": {
      "bool": {
        "must":[
          {"span_or" :{
              "clauses" : [
                {"span_term" : {"okato":"90240840002"}}
              ]
            }
          } 
        ]
    }
  }
}
'

curl -XGET 'http://192.168.232.8:9200/classifiers_kladr_streets/_search?pretty' -d '
{
  "query": {
      "bool": {
        "must":[
          {"match": {"name": "Школьная"}},
          {"bool": {
            "should":[
              {"match":{"short_name": "пл."}},
              {"bool": {
                "must_not": [
                  {"match":{"short_name": "ул"}}
                ]
              }
              }
            ]
          }
          } 
        ]
    }
  }
}
'




curl -XGET 'http://192.168.232.8:9200/_all/_settings'


Core::Kladr::Streets.or(:okato.in => [90230875002, 90230875002]).criteria

"okato":"90230875002"

curl -XGET 'http://192.168.232.8:9200/classifiers_kladr_streets/_search?pretty' -d '
{"query":{"bool":{"must":[{"match_phrase":{"name":"Гоголя"}}]}}}'

{"query" : {"bool" : {"must" : [{"bool" : {"should" : [{"match" : {"short_name" : "ул"}}, {"bool" : {"must_not" : {"match" : {"okato" : {"query" : "90230875002 90230875002", "operator" : "or"}}}}}]}}]}}}

Core::Kladr::Street.or(:short_name => "ул",:okato.nin => ["90230875002", "90230875002"]).count

Core::Kladr::Street.or(:short_name => "ул").count



curl -XGET 'http://192.168.232.8:9200/classifiers_production_db_core_oshs_mvd_officials/_search?pretty' -d '{"query" : {"bool" : {"must" : [{"bool" : {"should" : [{"match" : {"short_name" : "ул"}}, {"bool" : {"must_not" : {"match" : {"okato" : {"query" : "90230875002 90230875002", "operator" : "or"}}}}}]}}]}}}'


curl -XGET 'http://192.168.232.8:9200/citizen_requests_production_db_core_cards_citizen_requests_cards/_search?pretty' -d '
{"query":{"match_all": {}}}'

Core::Cards::SecretIncomingDocuments::Card.where('state_structures.signer_name' => /а/, 'state_structures.add_info' => nil).count

Core::Cards::CitizenRequests::Card.where(state_structures: {'$elemMatch' => {'add_info' => {"$ne" => ''}}})

Core::Cards::CitizenRequests::Card.where(state_structures: {'$elemMatch' => {'signer_name' => /а/,'add_info' => ''}}).count

curl -XGET 'http://192.168.232.8:9200/citizen_requests_production_db_core_cards_citizen_requests_cards/_count?pretty' -d '
{
"query":{"bool": {
  "must": {
    "match_all": {
    }
  }
}}}'

curl -XGET 'http://192.168.232.8:9200/citizen_requests_production_db_core_cards_citizen_requests_cards/_count?pretty' -d '
{
  "query":{
    "bool":{
      "must":[
      {"match": {"state_structures.organisation_id":"54378ed1a90a000592000001"}}
      ]
    }
  }
}
'

Core::Cards::CitizenRequests::Card.where('state_structures.signer_type' => "esd_person","state_structures.organisation_id"=>"54378ed1a90a000592000001").count

Core::Cards::CitizenRequests::Card.where('state_structures'=> {'$elemMatch' => { 'signer_type' => "esd_person","organisation_id"=>"54378ed1a90a000592000001"}}).count


curl -XGET 'http://192.168.232.8:9200/citizen_requests_production_db_core_cards_citizen_requests_cards/_search?pretty&size=30' -d '
{"fields":["state_structures.signer_name"], "query":{"bool":{"must":[{"regexp":{"state_structures.signer_name":".*а.*"}}]}}}'

curl -XGET 'http://192.168.232.8:9200/citizen_requests_production_db_core_cards_citizen_requests_cards/_count?pretty' -d '
{"query":{"bool":{"must":[{"regexp":{"state_structures.signer_name":".*а.*"}}, {"constantScore":{"filter":{"missing":{"field":"state_structures.add_info"}}}}]}}}'

curl -XGET 'http://192.168.232.8:9200/citizen_requests_production_db_core_cards_citizen_requests_cards/_count?pretty' -d '
{ "query": { "filtered": { "filter": { "not": { "filter": { "range": { "state_structures.add_info": { } } } } } } } }'

{ "query": { "filtered": { "filter": { "not": { "filter": { "range": { "name": { } } } } } } } }

curl -XGET 'http://192.168.232.8:9200/citizen_requests_production_db_core_cards_citizen_requests_cards/_count?pretty' -d '
{"query":
  {"bool":
    {"must":[
      {"bool": {
            "should":[
               {"match":
                 {"themes":
                   {"query":"543685ff3058000673000001 547d8d77fcbb0002a3000001 547703983c53000184000001", 
                    "operator":"or"}
                 }
               },
              {"constantScore":
                {"filter":
                  {"missing":
                    {"field":"themes"}}}}
            ]
          }
      } 
    ]
    }}}'

curl -XGET 'http://192.168.232.8:9200/citizen_requests_production_db_core_cards_citizen_requests_cards/_count?pretty' -d '{"query":{"bool":{"must":[[{"match_phrase":{"state_structures.signer_type":"esd_person"}}, {"match_phrase":{"state_structures.organisation_id":"54378ed1a90a000592000001"}}]]}}}'


VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV

{"query"=>{"bool"=>{"must"=>[{"match"=>{"themes"=>{"query"=>"543685ff3058000673000001 547d8d77fcbb0002a3000001 547703983c53000184000001", "operator"=>"or"}}}]}}} 


{"match" :
      {"state_structures.r__s_last_name" : "207198194190212174192186194168164"}
} 
        {
          "nested": {
            "path": "comments", 
            "query": {
              "bool": {
                "": [ 
                  { "match": { "comments.name": "john" }},
                  { "match": { "comments.age":  28     }}
                ]
        }}}}

curl -XGET 'http://192.168.232.8:9200/citizen_requests_production_db_core_cards_citizen_requests_cards/_mapping/field/id'

aa = Core::Cards::CitizenRequests::Card.where('state_structures'=> {'$elemMatch' => { 'signer_type' => { '$elemMatch' => 'esd_person' },'organisation_id'=>'54378ed1a90a000592000001'}})
aa = Core::Cards::CitizenRequests::Card.where('state_structures'=> {'$elemMatch' => { 'signer_type' => 'esd_person',"organisation_id"=>"54378ed1a90a000592000001"}})
aa = Core::Cards::CitizenRequests::Card.where( "themes"=>{"$in"=>["543685ff3058000673000001", "547d8d77fcbb0002a3000001",nil,nil,nil,"547703983c53000184000001"]} )

Core::Cards::CitizenRequests::Card.where(state_structures: {'$elemMatch' => {'signer_name' => /а/}}).count

Core::Cards::CitizenRequests::Card.where( "themes"=>{"$in"=>["543685ff3058000673000001", "547d8d77fcbb0002a3000001", "547703983c53000184000001",nil,nil,nil]} )

Core::Cards::IncomingDocuments::Card.where("_id"=>{"$nin"=>[]}) 

Core::Cards::IncomingDocuments::Card.where("exemplars.addressed_to_name" => /колок/, "exemplars.status_code" => "to_the_report").with_elastic_search.count

{"bool"=>{"must"=>[{"bool"=>{"should"=>[{"match"=>{"themes"=>{"query"=>"543685ff3058000673000001 547d8d77fcbb0002a3000001 547703983c53000184000001 ", "operator"=>"or"}}}, {"constantScore"=>{"filter"=>{"missing"=>{"field"=>"themes"}}}}]}}]}}


nested part

curl -XGET 'http://192.168.232.8:9200/citizen_requests_production_db_core_cards_citizen_requests_cards/_count?pretty' -d'{"query":{"bool":{"must":[{"nested":{"path":"state_structures", "query":{"bool":{"must":[{"match_phrase":{"state_structures.signer_type":"esd_person"}}, {"match_phrase":{"state_structures.organisation_id":"54378ed1a90a000592000001"}}]}}}}]}}}'



'{"query"=>
  {"bool"=>
    {"must"=>[
      {"nested"=>
        {"path"=>"state_structures", 
         "query"=>
            {"bool"=>
              {"must"=>[
                {"match_phrase"=>{"state_structures.signer_type"=>"esd_person"}}, {"match_phrase"=>{"state_structures.organisation_id"=>"54378ed1a90a000592000001"}}
                ]}
            }
        }
      }
      ]
    }
  }
}'

curl -XGET 'http://192.168.232.8:9200/test_test_v1/_search?pretty' -d '{"query":{"match_all":{}}}'

curl -XGET 'http://192.168.232.8:9200/test_test_v1/_mapping?pretty'

curl -XPUT 'http://192.168.232.8:9200/test_test_v1/tweet/1' -d '{
        "message" : "some arrays in this tweet...",
        "lists" : [
            {
                "name" : "prog_list",
                "description" : "programming list"
            },
            {
                "name" : "cool_list",
                "description" : "cool stuff list"
            }
        ]
}'

curl -XGET 'http://192.168.232.8:9200/test_test_v1/_search?pretty' -d '{
  "query":{
    "bool" :{
      "must":[
        {"match": {"lists.name" : "prog_list"}}
      ]
    }
  }
}'

curl -XGET 'http://192.168.232.8:9200/test_test_v1/_search?pretty' -d '{
  "query":{
    "bool" :{
      "must":[
        {"nested": {
          "path": "lists",
          "query" : {
            "bool": {
              "must": [
                {"match": {"name":"prog_list"}},
                {"match": {"description":"cool"}}
              ]
            }
          }
        }}
      ]
    }
  }
}'

curl -XPUT 'http://192.168.232.8:9200/test_test/tweet/_mapping' -d '
{
    "tweet" : {
        "properties" : {
            "lists" : {"type" : "nested", "store" : "yes"}
        }
    }
}
'
references
про сами данные
http://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-nested-type.html
про переиндексирование
https://www.elastic.co/blog/changing-mapping-with-zero-downtime
http://www.elastic.co/guide/en/elasticsearch/guide/master/reindex.html
http://www.elastic.co/guide/en/elasticsearch/guide/master/scan-scroll.html
http://www.elastic.co/guide/en/elasticsearch/guide/master/bulk.html


FINALE

задаём формат данных:

"type" : "nested", << говорит что поле nested, неожиданно
"include_in_parent": true,  << вот это позволяет искать и через точку(см. ниже)

curl -XPUT 'http://192.168.232.8:9200/test_test_v1/_mapping/tweet' -d '{
    "tweet" : {
        "properties" : {
            "message" : {"type":"string"},
            "lists" : {
                "type" : "nested",
                "include_in_parent": true, 
                "properties": {
                    "name" : {"type": "string" },
                    "description"  : {"type": "string" }
                }
            }
        }
    }
}
эта база откуда попытаемся переиндексировать в test_test_v1
curl -XPUT 'http://192.168.232.8:9200/test_test/_mapping/tweet' -d '{
    "tweet" : {
        "properties" : {
            "message" : {"type":"string"},
            "lists" : {
                "type" : "object",
                "properties": {
                    "name" : {"type": "string" },
                    "description"  : {"type": "string" }
                }
            }
        }
    }
}

загружаем данные:
curl -XPUT 'http://192.168.232.8:9200/test_test_v1/tweet/1' -d '{
        "message" : "some arrays in this tweet...",
        "lists" : [ 
            {
                "name" : "prog_list", 
                "description" : "programming list"
            },
            {
                "name" : "cool_list",
                "description" : "cool stuff list"
            }
        ]
}'
внутри list будут распознаны как nested объекты.
индексация будет по ним тоже, поэтому эластик пишет что в базе test_test_v1 3 объекта.

ТЕСТИРОВАНИЕ:

VVV - не находит, так как в разных нестедах

Пример через processor
aa = Core::Cards::CitizenRequests::Card.where('lists'=> {'$elemMatch' => { 'name' => "prog_list" ,'description'=>'cool'}})

Core::ElasticSearch::Processor.to_query(aa)
=> curl -XGET 'http://192.168.232.8:9200/test_test_v1/_search?pretty' -d '
 {"query":{"bool":{"must":[{"nested":{"path":"lists", "query":{"bool":{"must":[{"match_phrase":{"lists.name":"prog_list"}}, {"match_phrase":{"lists.description":"cool"}}]}}}}]}}}'


curl -XGET 'http://192.168.232.8:9200/test_test_v1/_search?pretty' -d '{
  "query":{
    "bool" :{
      "must":[
        {"nested": {
          "path": "lists",
          "query" : {
            "bool": {
              "must": [
                {"match": {"name":"prog_list"}},
                {"match": {"description":"cool"}}
              ]
            }
          }
        }}
      ]
    }
  }
}'

VVV - находит, так как в одном нестеде

aa = Core::Cards::CitizenRequests::Card.where('lists'=> {'$elemMatch' => { 'name' => "prog_list" ,'description'=>'programming'}})
=> curl -XGET 'http://192.168.232.8:9200/test_test_v1/_search?pretty' -d ' 
{"query":{"bool":{"must":[{"nested":{"path":"lists", "query":{"bool":{"must":[{"match_phrase":{"lists.name":"prog_list"}}, {"match_phrase":{"lists.description":"programming"}}]}}}}]}}}'

curl -XGET 'http://192.168.232.8:9200/test_test_v1/_search?pretty' -d '{
  "query":{
    "bool" :{
      "must":[
        {"nested": {
          "path": "lists",
          "query" : {
            "bool": {
              "must": [
                {"match": {"name":"prog_list"}},
                {"match": {"description":"programming"}}
              ]
            }
          }
        }}
      ]
    }
  }
}'


можно обращаться и через точку, но тогда он будет искать как-будто не в нестедах, то есть такой найдёт:

aa = Core::Cards::CitizenRequests::Card.where('lists.name'=> "prog_list" ,'lists.description'=>'programming')
=> curl -XGET 'http://192.168.232.8:9200/test_test_v1/_search?pretty' -d '
{"query":{"bool":{"must":[{"match_phrase":{"lists.name":"prog_list"}}, {"match_phrase":{"lists.description":"programming"}}]}}}'

curl -XGET 'http://192.168.232.8:9200/test_test_v1/_search?pretty' -d '{
  "query":{
    "bool" :{
      "must":[
        {"match": {"lists.name" : "prog_list"}},
        {"match": {"lists.description":"cool"}}
      ]
    }
  }
}'

маппинг документа с object:
curl -XGET 'http://192.168.232.8:9200/test_test/_mapping?pretty'
получим:
{
  "test_test" : {
    "mappings" : {
      "tweet" : {
        "properties" : {
          "lists" : {
            "properties" : {
              "description" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              }
            }
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    }
  }
}

с nested:
{
  "test_test_v1" : {
    "mappings" : {
      "tweet" : {
        "properties" : {
          "lists" : {
            "type" : "nested",
            "include_in_parent" : true,
            "properties" : {
              "description" : {
                "type" : "string"
              },
              "name" : {
                "type" : "string"
              }
            }
          },
          "message" : {
            "type" : "string"
          }
        }
      }
    }
  }
}

видно сразу, что можно пройти по индексам, промаппить их, получить слепок данных и вставить в каждый хеш по 
"type" : "nested",
"include_in_parent" : true,
если у него есть ключ "properties" и это не корень(как здесь tweet). Правда тогда количество документов вырастет просто колоссально. Остаётся только ручками везде проставить где надо и пересоздать индекс. я всё брал из мана, который в референсах вверху.

real_base - типо citizen_requests_production_db_core_cards_citizen_requests_cards
curl -XPOST 'http://192.168.232.8:9200/_aliases' -d '{
    "actions": [
        { "add": {
            "alias": "real_base",
            "index": "test_test"
        }}
    ]
}
'

связываем что обращения к real_base идут в test_test.
теперь надо переиндексировать test_test, то есть создаём test_test_v1 с новыми полями, как наверху.
затем надо скопировать все данные из test_test в test_test_1. 

см best_migrator.rb